# Copy this file to .env and fill in your actual values.
# The .env file is ignored by .gitignore and should not be committed to source control.

# --- Flask Core Configuration ---
# Set the environment for Flask. Options: 'development', 'production', 'testing'
FLASK_ENV=development
# The main application entry point for the 'flask' command
FLASK_APP=run.py
# The port the application will run on
PORT=5000


# --- Application Secrets ---
# Generate strong random keys for production environments.
# You can generate a key with: python -c 'import secrets; print(secrets.token_hex(32))'
SECRET_KEY="a_very_secret_and_long_random_string_for_flask_sessions"
JWT_SECRET_KEY="another_very_secret_and_long_random_string_for_jwt"

# --- Encryption Key ---
# A 32-byte URL-safe base64-encoded key for encrypting data source credentials.
# Generate with: python -c 'from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())'
ENCRYPTION_KEY="your-32-byte-fernet-encryption-key-here"


# --- Database Configuration ---
# Connection string for your PostgreSQL database.
# Format: postgresql://<user>:<password>@<host>:<port>/<dbname>
DATABASE_URL=postgresql://user:password@localhost:5432/authguard_db


# --- Redis Configuration ---
# Connection URL for your Redis instance. Used for caching and rate limiting.
# The /0 at the end specifies the database number.
REDIS_URL=redis://localhost:6379/0


# --- Optional: Single Sign-On (SSO) Configuration ---
# These are only needed if you are implementing and using the SSO services.
# For local development, these can be left blank.

# Example for Google OAuth2
OAUTH2_CLIENT_ID=your-google-or-other-oauth-client-id
OAUTH2_CLIENT_SECRET=your-oauth-client-secret

# Example for LDAP
LDAP_SERVER=ldap://your-ldap-server.com:389
LDAP_BASE_DN=ou=people,dc=example,dc=org

# Example for SAML
SAML_ENTITY_ID=your-saml-entity-id